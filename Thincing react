class ProductCategoryRow extends React.Component {
  render() {
    const category = this.props.category;
    return (
      <tr>
        <th colSpan="2">
          {category}
        </th>
      </tr>
    );
  }
}

class ProductRow extends React.Component {
  render() {
    const product = this.props.product;
    const name = product.stocked ?
      product.name :
      <span style={{color: 'red'}}>
        {product.name}
      </span>;

    return (
      <tr>
        <td>{name}</td>
        <td>{product.price}</td>
      </tr>
    );
  }
}

class ProductTable extends React.Component {
  render() {
    const rows = [];
    let lastCategory = null;
    
    this.props.products.forEach((product) => {
      if (product.category !== lastCategory) {
        rows.push(
          <ProductCategoryRow
            category={product.category}
            key={product.category} />
        );
      }
      rows.push(
        <ProductRow
          product={product}
          key={product.name} />
      );
      lastCategory = product.category;
    });

    return (
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Price</th>
          </tr>
        </thead>
        <tbody>{rows}</tbody>
      </table>
    );
  }
}

class SearchBar extends React.Component {
  render() {
    return (
      <form>
        <input type="text" placeholder="Search..." />
        <p>
          <input type="checkbox" />
          {' '}
          Only show products in stock
        </p>
      </form>
    );
  }
}

class FilterableProductTable extends React.Component {
  render() {
    return (
      <div>
        <SearchBar />
        <ProductTable products={this.props.products} />
      </div>
    );
  }
}


const PRODUCTS = [
  {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},
  {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},
  {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},
  {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},
  {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},
  {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}
];
 
ReactDOM.render(
  <FilterableProductTable products={PRODUCTS} />,
  document.getElementById('container')
);


/*Теперь, когда у вас есть иерархия компонентов, пришло время реализовать ваше приложение. Самый простой способ - создать версию, которая берет вашу модель данных и отрисовывает UI, но не имеет интерактивности. Лучше всего отделить эти процессы, потому что для создания статической версии требуется больше кодировать и меньше думать, в то время как для добавления интерактивности требуется больше мыслительного процесса, но меньше печатной рутины. Посмотрим почему.

Чтобы создать статическую версию вашего приложения, которое отображает вашу модель данных, вы захотите создать компоненты, которые повторно используют другие компоненты и передают данные с помощью props. props - это способ передачи данных от родителя потомку. Если вы знакомы с концепцией состояния, не используйте состояние вообще для создания этой статической версии. Состояние зарезервировано только для интерактивности, то есть данные изменяются с течением времени. Поскольку это статическая версия приложения, вам это не нужно.

Вы можете начать создавать компоненты сверху вниз или снизу вверх. То есть вы можете начать с построения компонентов, находящихся выше в иерархии (то есть с FilterableProductTable) или с более нижних (ProductRow). В более простых примерах, как правило, легче идти сверху вниз, а в более крупных проектах легче идти снизу вверх и писать тесты по мере создания компонентов.

В конце этого шага вы будете иметь библиотеку повторно используемых компонентов, которые отображают вашу модель данных. Компоненты будут иметь только методы render(), поскольку это статическая версия вашего приложения. Компонент на вершине иерархии (FilterableProductTable) будет принимать вашу модель данных через props. Если вы внесете изменения в свою базовую модель данных и снова вызовете ReactDOM.render(), UI будет обновлен. Легко понять, как обновляется ваш UI и где вносить изменения, так как тут нет ничего сложного. Односторонний поток данных React (также называемый односторонней привязкой) сохраняет все модульным и быстрым.*/
